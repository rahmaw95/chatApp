'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanUp = exports.validateCredentialsProduceTeamId = undefined;

var _promise;

function _load_promise() {
  return _promise = _interopRequireDefault(require('babel-runtime/core-js/promise'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _isNan;

function _load_isNan() {
  return _isNan = _interopRequireDefault(require('babel-runtime/core-js/number/is-nan'));
}

var _stringify;

function _load_stringify() {
  return _stringify = _interopRequireDefault(require('babel-runtime/core-js/json/stringify'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var validateCredentialsProduceTeamId = exports.validateCredentialsProduceTeamId = function () {
  var _ref3 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(creds, metadata) {
    var getTeamsAttempt, reason, rawDump, teams, answers;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return spawnAndCollectJSONOutputAsync(FASTLANE.validate_apple_credentials, [creds.appleId, creds.password]);

          case 2:
            getTeamsAttempt = _context.sent;

            if (!(getTeamsAttempt.result === 'failure')) {
              _context.next = 6;
              break;
            }

            reason = getTeamsAttempt.reason, rawDump = getTeamsAttempt.rawDump;
            throw new Error('Reason:' + reason + ', raw:' + (0, (_stringify || _load_stringify()).default)(rawDump));

          case 6:
            teams = getTeamsAttempt.teams;

            if (!(teams.length === 0)) {
              _context.next = 9;
              break;
            }

            throw new Error('You have no team ID associated with your apple account, cannot proceed');

          case 9:
            (0, (_log || _load_log()).default)('You have ' + teams.length + ' teams');

            if (!(teams.length === 1)) {
              _context.next = 15;
              break;
            }

            console.log('Only 1 team associated with your account, using Team ID: ' + teams[0].teamId);
            return _context.abrupt('return', { teamId: teams[0].teamId });

          case 15:
            teams.forEach(function (team, i) {
              console.log(i + 1 + ') ' + team['teamId'] + ' "' + team['name'] + '" (' + team['type'] + ')');
            });
            _context.next = 18;
            return (_inquirer || _load_inquirer()).default.prompt({
              type: 'input',
              name: 'choice',
              message: 'Which Team ID to use?',
              validate: function validate(val) {
                return !(0, (_isNan || _load_isNan()).default)(parseInt(val, 10));
              }
            });

          case 18:
            answers = _context.sent;
            return _context.abrupt('return', { teamId: teams[+answers.choice - 1].teamId });

          case 20:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function validateCredentialsProduceTeamId(_x, _x2) {
    return _ref3.apply(this, arguments);
  };
}();

var cleanUp = exports.cleanUp = function () {
  var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2() {
    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(process.platform === 'win32' && fastlaneScratchPad !== null)) {
              _context2.next = 3;
              break;
            }

            _context2.next = 3;
            return (0, (_spawnAsync || _load_spawnAsync()).default)(WSL_BASH, ['-c', 'rm -rf ' + fastlaneScratchPad]);

          case 3:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function cleanUp() {
    return _ref4.apply(this, arguments);
  };
}();

var spawnAndCollectJSONOutputAsync = function () {
  var _ref5 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3(program, args) {
    var tmpDir, tmp, cmd;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(process.platform === 'win32' && fastlaneScratchPad === null)) {
              _context3.next = 9;
              break;
            }

            _context3.next = 3;
            return (0, (_spawnAsync || _load_spawnAsync()).default)(WSL_BASH, ['-c', 'mktemp -d']);

          case 3:
            tmpDir = _context3.sent;
            tmp = tmpDir.stdout.trim();
            cmd = 'cp -R \'/mnt/c' + windowsToWSLPath(FASTLANE.ruby_dir) + '\' ' + tmp + '/fastlane';
            _context3.next = 8;
            return (0, (_spawnAsync || _load_spawnAsync()).default)(WSL_BASH, ['-c', cmd]);

          case 8:
            fastlaneScratchPad = tmp + '/fastlane';

          case 9:
            return _context3.abrupt('return', new (_promise || _load_promise()).default(function (resolve, reject) {
              var jsonContent = [];
              var opts = { stdio: ['inherit', 'pipe', 'pipe'] };
              try {
                if (process.platform === 'win32') {
                  var script = (0, _path.basename)(program);
                  var _cmd = ['-c', WSL_ONLY_PATH + ' ' + fastlaneScratchPad + '/' + script + ' ' + args.join(' ')];
                  var child = _child_process.default.spawn(WSL_BASH, _cmd, opts);
                } else {
                  var child = _child_process.default.spawn(program, args, opts);
                }
              } catch (e) {
                return reject(e);
              }
              child.stdout.on('data', function (d) {
                return console.log(d.toString());
              });
              // This is where we get our replies back from the ruby code
              child.stderr.on('data', function (d) {
                return jsonContent.push(d);
              });
              child.stdout.on('end', function () {
                var reply = Buffer.concat(jsonContent).toString();
                try {
                  resolve(JSON.parse(reply));
                } catch (e) {
                  reject({
                    result: 'failure',
                    reason: 'Could not understand JSON reply from Ruby local auth scripts',
                    rawDump: reply
                  });
                }
              });
            }));

          case 10:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function spawnAndCollectJSONOutputAsync(_x3, _x4) {
    return _ref5.apply(this, arguments);
  };
}();

exports.createAppOnPortal = createAppOnPortal;
exports.ensureAppIdLocally = ensureAppIdLocally;
exports.produceProvisionProfile = produceProvisionProfile;
exports.producePushCerts = producePushCerts;
exports.produceCerts = produceCerts;

var _child_process = _interopRequireDefault(require('child_process'));

var _slash;

function _load_slash() {
  return _slash = _interopRequireDefault(require('slash'));
}

var _spawnAsync;

function _load_spawnAsync() {
  return _spawnAsync = _interopRequireDefault(require('@expo/spawn-async'));
}

var _path = require('path');

var _inquirer;

function _load_inquirer() {
  return _inquirer = _interopRequireDefault(require('inquirer'));
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../log'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FASTLANE = process.platform === 'darwin' ? require('@expo/traveling-fastlane-darwin')() : require('@expo/traveling-fastlane-linux')();

var WSL_BASH = 'C:\\Windows\\system32\\bash.exe';
var WSL_ONLY_PATH = 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

function appStoreAction(creds, metadata, teamId, action) {
  var args = [action, creds.appleId, creds.password, teamId, metadata.bundleIdentifier, metadata.experienceName];
  return spawnAndCollectJSONOutputAsync(FASTLANE.app_management, args);
}

function createAppOnPortal(creds, metadata, teamId) {
  return appStoreAction(creds, metadata, teamId, 'create');
}

function ensureAppIdLocally(creds, metadata, teamId) {
  return appStoreAction(creds, metadata, teamId, 'verify');
}

function produceProvisionProfile(credentials, _ref, teamId) {
  var bundleIdentifier = _ref.bundleIdentifier;

  return spawnAndCollectJSONOutputAsync(FASTLANE.fetch_new_provisioning_profile, [credentials.appleId, credentials.password, bundleIdentifier, teamId]);
}

function producePushCerts(credentials, _ref2, teamId) {
  var bundleIdentifier = _ref2.bundleIdentifier;

  return spawnAndCollectJSONOutputAsync(FASTLANE.fetch_push_cert, [credentials.appleId, credentials.password, bundleIdentifier, teamId]);
}

function produceCerts(credentials, teamId) {
  return spawnAndCollectJSONOutputAsync(FASTLANE.fetch_cert, [credentials.appleId, credentials.password, teamId]);
}

var windowsToWSLPath = function windowsToWSLPath(p) {
  var noSlashes = (0, (_slash || _load_slash()).default)(p);
  return noSlashes.slice(2, noSlashes.length);
};

var fastlaneScratchPad = null;
//# sourceMappingURL=../__sourcemaps__/local-auth/auth.js.map
