'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2;

function _load_extends() {
  return _extends2 = _interopRequireDefault(require('babel-runtime/helpers/extends'));
}

var _stringify;

function _load_stringify() {
  return _stringify = _interopRequireDefault(require('babel-runtime/core-js/json/stringify'));
}

var _getPrototypeOf;

function _load_getPrototypeOf() {
  return _getPrototypeOf = _interopRequireDefault(require('babel-runtime/core-js/object/get-prototype-of'));
}

var _classCallCheck2;

function _load_classCallCheck() {
  return _classCallCheck2 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));
}

var _createClass2;

function _load_createClass() {
  return _createClass2 = _interopRequireDefault(require('babel-runtime/helpers/createClass'));
}

var _possibleConstructorReturn2;

function _load_possibleConstructorReturn() {
  return _possibleConstructorReturn2 = _interopRequireDefault(require('babel-runtime/helpers/possibleConstructorReturn'));
}

var _inherits2;

function _load_inherits() {
  return _inherits2 = _interopRequireDefault(require('babel-runtime/helpers/inherits'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _path = _interopRequireDefault(require('path'));

var _inquirer;

function _load_inquirer() {
  return _inquirer = _interopRequireDefault(require('inquirer'));
}

var _untildify;

function _load_untildify() {
  return _untildify = _interopRequireDefault(require('untildify'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('xdl');
}

var _BaseBuilder2;

function _load_BaseBuilder() {
  return _BaseBuilder2 = _interopRequireDefault(require('./BaseBuilder'));
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

var _auth;

function _load_auth() {
  return _auth = _interopRequireWildcard(require('../../local-auth/auth'));
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sharedQuestions = {
  teamId: {
    type: 'input',
    name: 'teamId',
    message: 'What is your Apple Team ID (you can find that on this page: https://developer.apple.com/account/#/membership)?',
    validate: function validate(val) {
      return val !== '';
    }
  },
  p12Path: {
    type: 'input',
    name: 'pathToP12',
    message: 'Path to P12 file:',
    validate: function () {
      var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(p12Path) {
        var stats;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return (_fsExtra || _load_fsExtra()).default.stat(p12Path);

              case 3:
                stats = _context.sent;
                return _context.abrupt('return', stats.isFile());

              case 7:
                _context.prev = 7;
                _context.t0 = _context['catch'](0);

                // file does not exist
                console.log('\nFile does not exist.');
                return _context.abrupt('return', false);

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined, [[0, 7]]);
      }));

      return function validate(_x) {
        return _ref.apply(this, arguments);
      };
    }(),
    filter: function filter(p12Path) {
      p12Path = (0, (_untildify || _load_untildify()).default)(p12Path);
      if (!_path.default.isAbsolute(p12Path)) {
        p12Path = _path.default.resolve(p12Path);
      }
      return p12Path;
    }
  },
  p12Password: {
    type: 'password',
    name: 'p12Password',
    message: 'P12 password:',
    validate: function validate(password) {
      return password.length > 0;
    }
  }
};

/**
 * Steps:
 * 1) Check for active builds -- only one build per user/experience can happen at once
 * 2) Check for Apple ID credentials for this user/experience
 * 		a) If they don't exist, prompt user to enter them. Submit them to server (/-/api/credentials/add),
 * 			 which will verify and store them.
 * 3) Check for valid cert for this user/experience
 * 		a) If valid cert doesn't exist, prompt user:
 * 	 			i) Do you have a certificate you'd like to use for signing this application, or would you like us
 * 	 				 to generate them for you?
 * 	 				 This is most common when you have other apps in the App Store, you're replacing an existing
 * 	 				 app in the App Store with an Exponent app, or you'd simply like more control over your Apple
 * 	 				 Developer account.
 * 	 	    ii) If they choose to upload a cert, ask them for the path to .p12 file. Upload the p12 (/-/api/credentials/add).
 * 	 	    iii) If they want us to manage it, call to /-/api/credentials/generate-certs, and verify that we were able to generate the cert
 * 	 	b) If a cert exists, the server will verify that it is still valid.
 * 4) Publish the experience from the local packager.
 * 5) Initiate build process.
 */

var IOSBuilder = function (_BaseBuilder) {
  (0, (_inherits2 || _load_inherits()).default)(IOSBuilder, _BaseBuilder);

  function IOSBuilder() {
    (0, (_classCallCheck2 || _load_classCallCheck()).default)(this, IOSBuilder);
    return (0, (_possibleConstructorReturn2 || _load_possibleConstructorReturn()).default)(this, (IOSBuilder.__proto__ || (0, (_getPrototypeOf || _load_getPrototypeOf()).default)(IOSBuilder)).apply(this, arguments));
  }

  (0, (_createClass2 || _load_createClass()).default)(IOSBuilder, [{
    key: 'run',
    value: function () {
      var _ref2 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2() {
        var _ref3, _ref3$args, username, experienceName, bundleIdentifier, publishedExpIds;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(this.projectDir);

              case 2:
                _ref3 = _context2.sent;
                _ref3$args = _ref3.args;
                username = _ref3$args.username;
                experienceName = _ref3$args.remoteFullPackageName;
                bundleIdentifier = _ref3$args.bundleIdentifierIOS;

                if (bundleIdentifier) {
                  _context2.next = 9;
                  break;
                }

                throw new (_xdl || _load_xdl()).XDLError((_xdl || _load_xdl()).ErrorCode.INVALID_OPTIONS, 'Your project must have a bundleIdentifier set in app.json. See https://docs.expo.io/versions/latest/guides/building-standalone-apps.html');

              case 9:
                _context2.next = 11;
                return this.checkStatus();

              case 11:
                if (!(this.options.type !== 'simulator')) {
                  _context2.next = 21;
                  break;
                }

                _context2.prev = 12;
                _context2.next = 15;
                return this.collectAndValidateCredentials(username, experienceName, bundleIdentifier);

              case 15:
                _context2.next = 21;
                break;

              case 17:
                _context2.prev = 17;
                _context2.t0 = _context2['catch'](12);

                (_log || _load_log()).default.error('Error validating credentials. You may need to clear them (with `-c`) and try again.');
                throw _context2.t0;

              case 21:
                _context2.next = 23;
                return this.publish();

              case 23:
                publishedExpIds = _context2.sent;
                _context2.next = 26;
                return this.build(publishedExpIds, 'ios');

              case 26:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[12, 17]]);
      }));

      function run() {
        return _ref2.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: '_throwIfFailureWithReasonDump',
    value: function _throwIfFailureWithReasonDump(replyAttempt) {
      if (replyAttempt.result === 'failure') {
        var reason = replyAttempt.reason,
            rawDump = replyAttempt.rawDump;

        throw new Error('Reason:' + reason + ', raw:' + (0, (_stringify || _load_stringify()).default)(rawDump));
      }
    }

    // Getting an undefined anywhere here probably means a ruby script
    // is throwing an exception

  }, {
    key: '_fullLocalAuthRun',
    value: function () {
      var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3(metadata) {
        var creds, checkCredsAttempt, teamId, produceCertAttempt, p12password, p12, privateSigningKey, checkAppExistenceAttempt, _checkAppExistenceAtt, appId, features, enabledFeatures, producePushCertsAttempt, privateSigningKeyPushCert, pushP12, pushP12password, produceProvisionProfileAttempt, provisioningProfile, freshCreds;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.askForAppleId({ askForTeamId: false });

              case 2:
                creds = _context3.sent;

                (0, (_log || _load_log()).default)('Validating Credentials...');
                _context3.next = 6;
                return (_auth || _load_auth()).validateCredentialsProduceTeamId(creds, metadata);

              case 6:
                checkCredsAttempt = _context3.sent;

                this._throwIfFailureWithReasonDump(checkCredsAttempt);
                teamId = checkCredsAttempt.teamId;

                (0, (_log || _load_log()).default)('Creating Certificates...');
                _context3.next = 12;
                return (_auth || _load_auth()).produceCerts(creds, teamId);

              case 12:
                produceCertAttempt = _context3.sent;

                this._throwIfFailureWithReasonDump(produceCertAttempt);
                p12password = produceCertAttempt.p12password, p12 = produceCertAttempt.p12, privateSigningKey = produceCertAttempt.privateSigningKey;

                (0, (_log || _load_log()).default)('Making sure that we have an AppID on the Developer Portal...');
                _context3.next = 18;
                return (_auth || _load_auth()).ensureAppIdLocally(creds, metadata, teamId);

              case 18:
                checkAppExistenceAttempt = _context3.sent;

                if (!(checkAppExistenceAttempt.result === 'failure' && checkAppExistenceAttempt.reason.startsWith('App could not be found for bundle id'))) {
                  _context3.next = 23;
                  break;
                }

                _context3.next = 22;
                return (_auth || _load_auth()).createAppOnPortal(creds, metadata, teamId);

              case 22:
                checkAppExistenceAttempt = _context3.sent;

              case 23:
                this._throwIfFailureWithReasonDump(checkAppExistenceAttempt);
                _checkAppExistenceAtt = checkAppExistenceAttempt, appId = _checkAppExistenceAtt.appId, features = _checkAppExistenceAtt.features, enabledFeatures = _checkAppExistenceAtt.enabledFeatures;

                (0, (_log || _load_log()).default)('Creating Push Certificates...');
                _context3.next = 28;
                return (_auth || _load_auth()).producePushCerts(creds, metadata, teamId);

              case 28:
                producePushCertsAttempt = _context3.sent;

                this._throwIfFailureWithReasonDump(producePushCertsAttempt);
                privateSigningKeyPushCert = producePushCertsAttempt.privateSigningKey, pushP12 = producePushCertsAttempt.pushP12, pushP12password = producePushCertsAttempt.pushP12password;


                (0, (_log || _load_log()).default)('Creating Provisioning Profile...');
                _context3.next = 34;
                return (_auth || _load_auth()).produceProvisionProfile(creds, metadata, teamId);

              case 34:
                produceProvisionProfileAttempt = _context3.sent;

                this._throwIfFailureWithReasonDump(produceProvisionProfileAttempt);
                provisioningProfile = produceProvisionProfileAttempt.provisioningProfile;
                freshCreds = {
                  teamId: teamId,
                  certP12: p12,
                  certPassword: p12password,
                  pushP12: pushP12,
                  pushP12password: pushP12password,
                  provisioningProfile: provisioningProfile,
                  appId: appId,
                  features: (0, (_stringify || _load_stringify()).default)(features),
                  enabledFeatures: (0, (_stringify || _load_stringify()).default)(enabledFeatures),
                  privateSigningKey: privateSigningKey,
                  privateSigningKeyPushCert: privateSigningKeyPushCert,
                  clientExpMadeCerts: 'true'
                };

                (0, (_log || _load_log()).default)('Updating credentials with expo...');
                _context3.next = 41;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('ios', freshCreds, metadata);

              case 41:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _fullLocalAuthRun(_x2) {
        return _ref4.apply(this, arguments);
      }

      return _fullLocalAuthRun;
    }()
  }, {
    key: '_localCollectAndValidateCredentials',
    value: function () {
      var _ref5 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee4(creds, metadata) {
        var userCreds, credentials, produceCertAttempt, p12password, p12, privateSigningKey, producePushCertsAttempt, privateSigningKeyPushCert, pushP12, pushP12password, produceProvisionProfileAttempt, provisioningProfile;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;

                if (creds) {
                  _context4.next = 7;
                  break;
                }

                _context4.next = 4;
                return this._fullLocalAuthRun(metadata);

              case 4:
                return _context4.abrupt('return', _context4.sent);

              case 7:
                if (!(!creds.certP12 || !creds.pushP12 || !creds.provisioningProfile)) {
                  _context4.next = 37;
                  break;
                }

                _context4.next = 10;
                return this.askForAppleId({ askForTeamId: true });

              case 10:
                userCreds = _context4.sent;
                credentials = {};

                if (!(creds.certP12 === undefined)) {
                  _context4.next = 20;
                  break;
                }

                (0, (_log || _load_log()).default)('Creating Certificates...');
                _context4.next = 16;
                return (_auth || _load_auth()).produceCerts(userCreds, userCreds.teamId);

              case 16:
                produceCertAttempt = _context4.sent;

                this._throwIfFailureWithReasonDump(produceCertAttempt);
                p12password = produceCertAttempt.p12password, p12 = produceCertAttempt.p12, privateSigningKey = produceCertAttempt.privateSigningKey;

                credentials = (0, (_extends2 || _load_extends()).default)({}, credentials, {
                  certP12: p12,
                  certPassword: p12password
                });

              case 20:
                if (!(creds.pushP12 === undefined)) {
                  _context4.next = 27;
                  break;
                }

                _context4.next = 23;
                return (_auth || _load_auth()).producePushCerts(userCreds, metadata, userCreds.teamId);

              case 23:
                producePushCertsAttempt = _context4.sent;

                this._throwIfFailureWithReasonDump(producePushCertsAttempt);
                privateSigningKeyPushCert = producePushCertsAttempt.privateSigningKey, pushP12 = producePushCertsAttempt.pushP12, pushP12password = producePushCertsAttempt.pushP12password;

                credentials = (0, (_extends2 || _load_extends()).default)({}, credentials, {
                  pushP12: pushP12,
                  pushP12password: pushP12password
                });

              case 27:
                if (!(creds.provisioningProfile === undefined)) {
                  _context4.next = 34;
                  break;
                }

                _context4.next = 30;
                return (_auth || _load_auth()).produceProvisionProfile(userCreds, metadata, userCreds.teamId);

              case 30:
                produceProvisionProfileAttempt = _context4.sent;

                this._throwIfFailureWithReasonDump(produceProvisionProfileAttempt);
                provisioningProfile = produceProvisionProfileAttempt.provisioningProfile;

                credentials = (0, (_extends2 || _load_extends()).default)({}, credentials, {
                  provisioningProfile: provisioningProfile
                });

              case 34:
                credentials = (0, (_extends2 || _load_extends()).default)({}, credentials, { clientExpMadeCerts: 'true' });
                _context4.next = 37;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('ios', credentials, metadata);

              case 37:
                _context4.next = 42;
                break;

              case 39:
                _context4.prev = 39;
                _context4.t0 = _context4['catch'](0);
                throw _context4.t0;

              case 42:
                _context4.prev = 42;
                _context4.next = 45;
                return (_auth || _load_auth()).cleanUp();

              case 45:
                return _context4.finish(42);

              case 46:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[0, 39, 42, 46]]);
      }));

      function _localCollectAndValidateCredentials(_x3, _x4) {
        return _ref5.apply(this, arguments);
      }

      return _localCollectAndValidateCredentials;
    }()
  }, {
    key: 'collectAndValidateCredentials',
    value: function () {
      var _ref6 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee6(username, experienceName, bundleIdentifier) {
        var _this2 = this;

        var credentialMetadata, existingCredentials, hasTeamId, hasCert, hasPushCert, hasProfile, credsToUpload, _ref7, teamId, answers, p12Data, _answers, _p12Data, _ref8, profilePath, profileData, hasAppleId, _hasCert, _hasPushCert, credentials;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                credentialMetadata = {
                  username: username,
                  experienceName: experienceName,
                  bundleIdentifier: bundleIdentifier,
                  platform: 'ios'
                };

                (0, (_log || _load_log()).default)('Checking for existing Apple credentials...');
                _context6.next = 4;
                return (_xdl || _load_xdl()).Credentials.credentialsExistForPlatformAsync(credentialMetadata);

              case 4:
                existingCredentials = _context6.sent;

                if (!this.options.localAuth) {
                  _context6.next = 14;
                  break;
                }

                if (!this.options.clearCredentials) {
                  _context6.next = 9;
                  break;
                }

                _context6.next = 9;
                return (_xdl || _load_xdl()).Credentials.removeCredentialsForPlatform('ios', credentialMetadata);

              case 9:
                _context6.next = 11;
                return this._localCollectAndValidateCredentials(existingCredentials, credentialMetadata);

              case 11:
                return _context6.abrupt('return', _context6.sent);

              case 14:
                if (!this.options.expertAuth) {
                  _context6.next = 58;
                  break;
                }

                (0, (_log || _load_log()).default)('\nWARNING! In expert auth mode, we won\'t be able to make sure your certificates,\nprovisioning profile, app ID, or team ID are valid. Please double check that you\'re\nuploading valid files for your app otherwise you may encounter strange errors!\n\nMake sure you\'ve created your app ID on the developer portal, that your app ID\nis in app.json as `bundleIdentifier`, and that the provisioning profile you\nupload matches that team ID and app ID.\n');

                hasTeamId = void 0, hasCert = void 0, hasPushCert = void 0, hasProfile = void 0;

                if (this.options.clearCredentials || !existingCredentials) {
                  hasTeamId = false;
                  hasCert = false;
                  hasPushCert = false;
                  hasProfile = false;
                } else if (existingCredentials) {
                  hasTeamId = !!existingCredentials.teamId;
                  hasCert = !!existingCredentials.certP12;
                  hasPushCert = !!existingCredentials.pushP12;
                  hasProfile = !!existingCredentials.provisioningProfile;
                }

                credsToUpload = {
                  clientExpMadeCerts: 'true'
                };

                if (hasTeamId) {
                  _context6.next = 25;
                  break;
                }

                _context6.next = 22;
                return (_inquirer || _load_inquirer()).default.prompt([sharedQuestions.teamId]);

              case 22:
                _ref7 = _context6.sent;
                teamId = _ref7.teamId;

                credsToUpload.teamId = teamId;

              case 25:
                if (hasCert) {
                  _context6.next = 35;
                  break;
                }

                (0, (_log || _load_log()).default)('Please provide your distribution certificate P12:');
                _context6.next = 29;
                return (_inquirer || _load_inquirer()).default.prompt([sharedQuestions.p12Path, sharedQuestions.p12Password]);

              case 29:
                answers = _context6.sent;
                _context6.next = 32;
                return (_fsExtra || _load_fsExtra()).default.readFile(answers.pathToP12);

              case 32:
                p12Data = _context6.sent;

                credsToUpload.certP12 = p12Data.toString('base64');
                credsToUpload.certPassword = answers.p12Password;

              case 35:
                if (hasPushCert) {
                  _context6.next = 45;
                  break;
                }

                (0, (_log || _load_log()).default)('Please provide the path to your push notification cert P12');
                _context6.next = 39;
                return (_inquirer || _load_inquirer()).default.prompt([sharedQuestions.p12Path, sharedQuestions.p12Password]);

              case 39:
                _answers = _context6.sent;
                _context6.next = 42;
                return (_fsExtra || _load_fsExtra()).default.readFile(_answers.pathToP12);

              case 42:
                _p12Data = _context6.sent;

                credsToUpload.pushP12 = _p12Data.toString('base64');
                credsToUpload.pushPassword = _answers.p12Password;

              case 45:
                if (hasProfile) {
                  _context6.next = 54;
                  break;
                }

                _context6.next = 48;
                return (_inquirer || _load_inquirer()).default.prompt([{
                  type: 'input',
                  name: 'profilePath',
                  message: 'Path to your provisioning profile which matches bundleIdentifer from app.json:',
                  validate: function () {
                    var _ref9 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee5(profilePath) {
                      var stats;
                      return (_regenerator || _load_regenerator()).default.wrap(function _callee5$(_context5) {
                        while (1) {
                          switch (_context5.prev = _context5.next) {
                            case 0:
                              _context5.prev = 0;
                              _context5.next = 3;
                              return (_fsExtra || _load_fsExtra()).default.stat(profilePath);

                            case 3:
                              stats = _context5.sent;
                              return _context5.abrupt('return', stats.isFile());

                            case 7:
                              _context5.prev = 7;
                              _context5.t0 = _context5['catch'](0);

                              // file does not exist
                              console.log('\nFile does not exist.');
                              return _context5.abrupt('return', false);

                            case 11:
                            case 'end':
                              return _context5.stop();
                          }
                        }
                      }, _callee5, _this2, [[0, 7]]);
                    }));

                    return function validate(_x8) {
                      return _ref9.apply(this, arguments);
                    };
                  }(),
                  filter: function filter(profilePath) {
                    profilePath = (0, (_untildify || _load_untildify()).default)(profilePath);
                    if (!_path.default.isAbsolute(profilePath)) {
                      profilePath = _path.default.resolve(profilePath);
                    }
                    return profilePath;
                  }
                }]);

              case 48:
                _ref8 = _context6.sent;
                profilePath = _ref8.profilePath;
                _context6.next = 52;
                return (_fsExtra || _load_fsExtra()).default.readFile(profilePath);

              case 52:
                profileData = _context6.sent;

                credsToUpload.provisioningProfile = profileData.toString('base64');

              case 54:
                _context6.next = 56;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('ios', credsToUpload, credentialMetadata);

              case 56:
                _context6.next = 100;
                break;

              case 58:
                // TODO remove this entirely!!!
                hasAppleId = void 0, _hasCert = void 0, _hasPushCert = void 0;

                if (this.options.clearCredentials || !existingCredentials) {
                  hasAppleId = false;
                  _hasCert = false;
                  _hasPushCert = false;
                } else if (existingCredentials) {
                  hasAppleId = !!existingCredentials.appleId;
                  _hasCert = !!existingCredentials.certP12;
                  _hasPushCert = !!existingCredentials.pushP12;
                }

                if (hasAppleId) {
                  _context6.next = 71;
                  break;
                }

                _context6.next = 63;
                return this.askForAppleId({ askForTeamId: true });

              case 63:
                credentials = _context6.sent;

                (0, (_log || _load_log()).default)('Validating Apple credentials...');
                _context6.next = 67;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'appleId', credentials, credentialMetadata);

              case 67:
                _context6.next = 69;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('ios', credentials, credentialMetadata);

              case 69:
                _context6.next = 74;
                break;

              case 71:
                (0, (_log || _load_log()).default)('Validating Apple credentials...');
                _context6.next = 74;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'appleId', null, credentialMetadata);

              case 74:
                (0, (_log || _load_log()).default)('Credentials valid.');

                if (_hasCert) {
                  _context6.next = 80;
                  break;
                }

                _context6.next = 78;
                return this.askForCerts(credentialMetadata);

              case 78:
                _context6.next = 83;
                break;

              case 80:
                (0, (_log || _load_log()).default)('Validating distribution certificate...');
                _context6.next = 83;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'cert', null, credentialMetadata);

              case 83:
                _context6.prev = 83;

                (0, (_log || _load_log()).default)('Validating app id...');
                _context6.next = 87;
                return (_xdl || _load_xdl()).Credentials.ensureAppId(credentialMetadata);

              case 87:
                _context6.next = 92;
                break;

              case 89:
                _context6.prev = 89;
                _context6.t0 = _context6['catch'](83);
                throw new (_xdl || _load_xdl()).XDLError((_xdl || _load_xdl()).ErrorCode.CREDENTIAL_ERROR, 'It seems like we can\'t create an app on the Apple developer center with this app id: ' + credentialMetadata.bundleIdentifier + '. Please change your bundle identifier to something else.');

              case 92:
                if (_hasPushCert) {
                  _context6.next = 97;
                  break;
                }

                _context6.next = 95;
                return this.askForPushCerts(credentialMetadata);

              case 95:
                _context6.next = 100;
                break;

              case 97:
                (0, (_log || _load_log()).default)('Validating push certificate...');
                _context6.next = 100;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'push', null, credentialMetadata);

              case 100:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this, [[83, 89]]);
      }));

      function collectAndValidateCredentials(_x5, _x6, _x7) {
        return _ref6.apply(this, arguments);
      }

      return collectAndValidateCredentials;
    }()
  }, {
    key: 'askForAppleId',
    value: function () {
      var _ref10 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee7(opts) {
        var questions, answers, credentials;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // ask for creds
                console.log('');
                console.log('We need your Apple ID/password to manage certificates and provisioning profiles from your Apple Developer account.');
                questions = [{
                  type: 'input',
                  name: 'appleId',
                  message: 'What\'s your Apple ID?',
                  validate: function validate(val) {
                    return val !== '';
                  }
                }, {
                  type: 'password',
                  name: 'password',
                  message: 'Password?',
                  validate: function validate(val) {
                    return val !== '';
                  }
                }];

                if (opts.askForTeamId) {
                  questions.push(sharedQuestions.teamId);
                }
                _context7.next = 6;
                return (_inquirer || _load_inquirer()).default.prompt(questions);

              case 6:
                answers = _context7.sent;
                credentials = {
                  appleId: answers.appleId,
                  password: answers.password,
                  teamId: answers.teamId
                };
                return _context7.abrupt('return', credentials);

              case 9:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function askForAppleId(_x9) {
        return _ref10.apply(this, arguments);
      }

      return askForAppleId;
    }()
  }, {
    key: 'askForCerts',
    value: function () {
      var _ref11 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee8(credentialMetadata) {
        var questions, answers, p12Data, credentials;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // ask about certs
                console.log('');

                questions = [{
                  type: 'rawlist',
                  name: 'manageCertificates',
                  message: 'Do you already have a distribution certificate you\'d like us to use,\nor do you want us to manage your certificates for you?',
                  choices: [{ name: 'Let Expo handle the process!', value: true }, { name: 'I want to upload my own certificate!', value: false }]
                }, (0, (_extends2 || _load_extends()).default)({}, sharedQuestions.p12Path, {
                  when: function when(answers) {
                    return !answers.manageCertificates;
                  }
                }), (0, (_extends2 || _load_extends()).default)({}, sharedQuestions.p12Password, {
                  when: function when(answers) {
                    return !answers.manageCertificates;
                  }
                })];
                _context8.next = 4;
                return (_inquirer || _load_inquirer()).default.prompt(questions);

              case 4:
                answers = _context8.sent;

                if (!answers.manageCertificates) {
                  _context8.next = 11;
                  break;
                }

                // Attempt to fetch new certificates
                (0, (_log || _load_log()).default)('Generating distribution certificate...');
                _context8.next = 9;
                return (_xdl || _load_xdl()).Credentials.fetchAppleCertificates(credentialMetadata);

              case 9:
                _context8.next = 20;
                break;

              case 11:
                _context8.next = 13;
                return (_fsExtra || _load_fsExtra()).default.readFile(answers.pathToP12);

              case 13:
                p12Data = _context8.sent;
                credentials = {
                  certP12: p12Data.toString('base64'),
                  certPassword: answers.p12Password
                };

                (0, (_log || _load_log()).default)('Validating distribution certificate...');
                _context8.next = 18;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'cert', credentials, credentialMetadata);

              case 18:
                _context8.next = 20;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('ios', credentials, credentialMetadata);

              case 20:

                (0, (_log || _load_log()).default)('Distribution certificate setup complete.');

              case 21:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function askForCerts(_x10) {
        return _ref11.apply(this, arguments);
      }

      return askForCerts;
    }()
  }, {
    key: 'askForPushCerts',
    value: function () {
      var _ref12 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee9(credentialMetadata) {
        var questions, answers, p12Data, credentials;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                // ask about certs

                questions = [{
                  type: 'rawlist',
                  name: 'managePushCertificates',
                  message: 'Do you already have a push notification certificate you\'d like us to use,\nor do you want us to manage your push certificates for you?',
                  choices: [{ name: 'Let Expo handle the process!', value: true }, { name: 'I want to upload my own certificate!', value: false }]
                }, (0, (_extends2 || _load_extends()).default)({}, sharedQuestions.p12Path, {
                  when: function when(answers) {
                    return !answers.managePushCertificates;
                  }
                }), (0, (_extends2 || _load_extends()).default)({}, sharedQuestions.p12Password, {
                  when: function when(answers) {
                    return !answers.managePushCertificates;
                  }
                })];
                _context9.next = 3;
                return (_inquirer || _load_inquirer()).default.prompt(questions);

              case 3:
                answers = _context9.sent;

                if (!answers.managePushCertificates) {
                  _context9.next = 10;
                  break;
                }

                // Attempt to fetch new certificates
                (0, (_log || _load_log()).default)('Fetching a new push certificate...');
                _context9.next = 8;
                return (_xdl || _load_xdl()).Credentials.fetchPushCertificates(credentialMetadata);

              case 8:
                _context9.next = 19;
                break;

              case 10:
                _context9.next = 12;
                return (_fsExtra || _load_fsExtra()).default.readFile(answers.pathToP12);

              case 12:
                p12Data = _context9.sent;
                credentials = {
                  pushP12: p12Data.toString('base64'),
                  pushPassword: answers.p12Password
                };


                (0, (_log || _load_log()).default)('Validating push certificate...');
                _context9.next = 17;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'push', credentials, credentialMetadata);

              case 17:
                _context9.next = 19;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('ios', credentials, credentialMetadata);

              case 19:
                (0, (_log || _load_log()).default)('Push certificate setup complete.');

              case 20:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function askForPushCerts(_x11) {
        return _ref12.apply(this, arguments);
      }

      return askForPushCerts;
    }()
  }]);
  return IOSBuilder;
}((_BaseBuilder2 || _load_BaseBuilder()).default);

exports.default = IOSBuilder;
module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/build/IOSBuilder.js.map
