{"version":3,"sources":["exp.js"],"names":["checkForExpUpdateAsync","state","current","latest","message","error","green","checkForUpdateAsync","subCommand","process","argv","writePathToUserSettingsAsync","writePathAsync","run","env","NODE_ENV","require","install","prototype","urlOpts","addOptions","allowOffline","option","allowNonInteractive","asyncAction","asyncFn","skipUpdateCheck","action","args","options","last","output","config","raw","offline","flush","_isCommandError","_isApiError","red","isXDLError","EXPO_DEBUG","gray","stack","grey","exit","asyncActionProjectDir","skipProjectValidation","skipAuthCheck","projectDir","opts","nonInteractive","ensureLoggedInAsync","cwd","resolve","pathToConfig","existsSync","Error","setCustomConfigPath","logLines","msg","logFn","split","line","logStackTrace","chunk","nestedLogFn","traceInfo","JSON","parse","e","addNewLineIfNone","bold","isLibraryFrame","startsWith","stackFrames","compact","lastAppCodeFrameIndex","findLastIndex","lastFrameIndexToLog","Math","min","length","unloggedFrames","i","match","printNewLineBeforeNextLog","logWithLevel","level","INFO","includesStack","nested","WARN","warn","nestedWarn","nestedError","bar","packagerLogsStream","projectRoot","onStartBuildBundle","total","clear","complete","incomplete","setBundleProgressBar","onProgressBuildBundle","ticks","percent","curr","tick","onFinishBuildBundle","err","startTime","endTime","updateLogs","newLogChunks","updater","forEach","newLogChunk","attachLoggerStream","stream","write","tag","type","currentStatus","start","validateLowLatencyAsync","status","FATAL","stop","runAsync","setSegmentNodeKey","setVersionName","version","_registerLogs","SERVER_URL","serverUrl","parsedUrl","api","host","hostname","port","developerTool","name","sync","__dirname","commandModule","file","default","commands","push","command","alias","includes","console","log","help","code","START_LOADING","STOP_LOADING","DOWNLOAD_CLI_PROGRESS","ERROR","notifications","addStream","global","all","catch"],"mappings":"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","file":"../exp.js","sourcesContent":["/**\n * @flow\n */\n\nimport ProgressBar from 'progress';\nimport _ from 'lodash';\nimport bunyan from '@expo/bunyan';\nimport chalk from 'chalk';\nimport glob from 'glob';\nimport fs from 'fs';\nimport path from 'path';\nimport simpleSpinner from '@expo/simple-spinner';\nimport url from 'url';\n\nimport program, { Command } from 'commander';\nimport {\n  Analytics,\n  Binaries,\n  Config,\n  Doctor,\n  Logger,\n  PackagerLogsStream,\n  NotificationCode,\n  Project,\n  ProjectUtils,\n  User as UserManager,\n} from 'xdl';\n\nimport { loginOrRegisterIfLoggedOut } from './accounts';\nimport log from './log';\nimport update from './update';\nimport urlOpts from './urlOpts';\nimport addCommonOptions from './commonOptions';\n\nif (process.env.NODE_ENV === 'development') {\n  require('source-map-support').install();\n}\n\n// The following prototyped functions are not used here, but within in each file found in `./commands`\n// Extending commander to easily add more options to certain command line arguments\nCommand.prototype.urlOpts = function() {\n  urlOpts.addOptions(this);\n  return this;\n};\n\nCommand.prototype.allowOffline = function() {\n  this.option('--offline', 'Allows this command to run while offline');\n  return this;\n};\n\nCommand.prototype.allowNonInteractive = function() {\n  this.option('--non-interactive', 'Fails if an interactive prompt would be required to continue.');\n  return this;\n};\n\n// asyncAction is a wrapper for all commands/actions to be executed after commander is done\n// parsing the command input\nCommand.prototype.asyncAction = function(asyncFn, skipUpdateCheck) {\n  addCommonOptions(this);\n  return this.action(async (...args) => {\n    if (!skipUpdateCheck) {\n      try {\n        await checkForUpdateAsync();\n      } catch (e) {}\n    }\n\n    try {\n      let options = _.last(args);\n      if (options.output === 'raw') {\n        log.config.raw = true;\n      }\n      if (options.offline) {\n        Config.offline = true;\n      }\n      await asyncFn(...args);\n      // After a command, flush the analytics queue so the program will not have any active timers\n      // This allows node js to exit immediately\n      Analytics.flush();\n    } catch (err) {\n      // TODO: Find better ways to consolidate error messages\n      if (err._isCommandError) {\n        log.error(err.message);\n      } else if (err._isApiError) {\n        log.error(chalk.red(err.message));\n      } else if (err.isXDLError) {\n        log.error(err.message);\n      } else {\n        log.error(err.message);\n        // TODO: Is there a better way to do this? EXPO_DEBUG needs to be set to view the stack trace\n        if (process.env.EXPO_DEBUG) {\n          log.error(chalk.gray(err.stack));\n        } else {\n          log.error(chalk.grey('Set EXPO_DEBUG=true in your env to view the stack trace.'));\n        }\n      }\n\n      process.exit(1);\n    }\n  });\n};\n\n// asyncActionProjectDir captures the projectDirectory from the command line,\n// setting it to cwd if it is not provided.\n// Commands such as `exp start` and `exp publish` use this.\n// It does several things:\n// - Everything in asyncAction\n// - Checks if the user is logged in or out\n// - Checks for updates\n// - Attaches the bundling logger\n// - Checks if the project directory is valid or not\n// - Runs AsyncAction with the projectDir as an argument\nCommand.prototype.asyncActionProjectDir = function(asyncFn, skipProjectValidation, skipAuthCheck) {\n  return this.asyncAction(async (projectDir, ...args) => {\n    try {\n      await checkForUpdateAsync();\n    } catch (e) {}\n\n    const opts = args[0];\n    if (!skipAuthCheck && !opts.nonInteractive && !opts.offline) {\n      await loginOrRegisterIfLoggedOut();\n    }\n\n    if (!skipAuthCheck) {\n      await UserManager.ensureLoggedInAsync();\n    }\n\n    if (!projectDir) {\n      projectDir = process.cwd();\n    } else {\n      projectDir = path.resolve(process.cwd(), projectDir);\n    }\n\n    if (opts.config) {\n      const pathToConfig = path.resolve(process.cwd(), opts.config);\n      if (!fs.existsSync(pathToConfig)) {\n        throw new Error(`File at provide config path does not exist: ${pathToConfig}`);\n      }\n      ProjectUtils.setCustomConfigPath(projectDir, pathToConfig);\n    }\n\n    const logLines = (msg, logFn) => {\n      for (let line of msg.split('\\n')) {\n        logFn(line);\n      }\n    };\n\n    const logStackTrace = (chunk, logFn, nestedLogFn) => {\n      let traceInfo;\n      try {\n        traceInfo = JSON.parse(chunk.msg);\n      } catch (e) {\n        return logFn(chunk.msg);\n      }\n\n      let { message, stack } = traceInfo;\n      log.addNewLineIfNone();\n      logFn(chalk.bold(message));\n\n      const isLibraryFrame = line => {\n        return line.startsWith('node_modules');\n      };\n\n      let stackFrames = _.compact(stack.split('\\n'));\n      let lastAppCodeFrameIndex = _.findLastIndex(stackFrames, line => {\n        return !isLibraryFrame(line);\n      });\n      let lastFrameIndexToLog = Math.min(\n        stackFrames.length - 1,\n        lastAppCodeFrameIndex + 2 // show max two more frames after last app code frame\n      );\n      let unloggedFrames = stackFrames.length - lastFrameIndexToLog;\n\n      // If we're only going to exclude one frame, just log them all\n      if (unloggedFrames === 1) {\n        lastFrameIndexToLog = stackFrames.length - 1;\n        unloggedFrames = 0;\n      }\n\n      for (let i = 0; i <= lastFrameIndexToLog; i++) {\n        let line = stackFrames[i];\n        if (!line) {\n          continue;\n        } else if (line.match(/react-native\\/.*YellowBox.js/)) {\n          continue;\n        }\n\n        if (line.startsWith('node_modules')) {\n          nestedLogFn('- ' + line);\n        } else {\n          nestedLogFn('* ' + line);\n        }\n      }\n\n      if (unloggedFrames > 0) {\n        nestedLogFn(`- ... ${unloggedFrames} more stack frames from framework internals`);\n      }\n\n      log.printNewLineBeforeNextLog();\n    };\n\n    const logWithLevel = chunk => {\n      if (!chunk.msg) {\n        return;\n      }\n      if (chunk.level <= bunyan.INFO) {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log, log.nested);\n        } else {\n          logLines(chunk.msg, log);\n        }\n      } else if (chunk.level === bunyan.WARN) {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log.warn, log.nestedWarn);\n        } else {\n          logLines(chunk.msg, log.warn);\n        }\n      } else {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log.error, log.nestedError);\n        } else {\n          logLines(chunk.msg, log.error);\n        }\n      }\n    };\n\n    let bar;\n    let packagerLogsStream = new PackagerLogsStream({\n      projectRoot: projectDir,\n      onStartBuildBundle: () => {\n        bar = new ProgressBar('Building JavaScript bundle [:bar] :percent', {\n          total: 100,\n          clear: true,\n          complete: '=',\n          incomplete: ' ',\n        });\n\n        log.setBundleProgressBar(bar);\n      },\n      onProgressBuildBundle: percent => {\n        if (!bar || bar.complete) return;\n        let ticks = percent - bar.curr;\n        ticks > 0 && bar.tick(ticks);\n      },\n      onFinishBuildBundle: (err, startTime: Date, endTime: Date) => {\n        if (bar && !bar.complete) {\n          bar.tick(100 - bar.curr);\n        }\n\n        if (bar) {\n          log.setBundleProgressBar(null);\n          bar = null;\n\n          if (err) {\n            log(chalk.red('Failed building JavaScript bundle.'));\n          } else {\n            log(chalk.green(`Finished building JavaScript bundle in ${endTime - startTime}ms.`));\n          }\n        }\n      },\n      updateLogs: updater => {\n        let newLogChunks = updater([]);\n        newLogChunks.forEach(newLogChunk => {\n          logWithLevel(newLogChunk);\n        });\n      },\n    });\n\n    // needed for validation logging to function\n    ProjectUtils.attachLoggerStream(projectDir, {\n      stream: {\n        write: chunk => {\n          if (chunk.tag === 'device') {\n            logWithLevel(chunk);\n          }\n        },\n      },\n      type: 'raw',\n    });\n\n    // The existing CLI modules only pass one argument to this function, so skipProjectValidation\n    // will be undefined in most cases. we can explicitly pass a truthy value here to avoid\n    // validation (eg for init)\n    //\n    // If the packager/manifest server is running and healthy, there is no need\n    // to rerun Doctor because the directory was already checked previously\n    // This is relevant for command such as `exp send`\n    if (!skipProjectValidation && (await Project.currentStatus(projectDir)) !== 'running') {\n      log('Making sure project is set up correctly...');\n      simpleSpinner.start();\n      // validate that this is a good projectDir before we try anything else\n\n      let status = await Doctor.validateLowLatencyAsync(projectDir);\n      if (status === Doctor.FATAL) {\n        throw new Error(`There is an error with your project. See above logs for information.`);\n      }\n      simpleSpinner.stop();\n      log('Your project looks good!');\n    }\n\n    // the existing CLI modules only pass one argument to this function, so skipProjectValidation\n    // will be undefined in most cases. we can explicitly pass a truthy value here to avoid validation (eg for init)\n\n    return asyncFn(projectDir, ...args);\n  }, true);\n};\n\nfunction runAsync() {\n  try {\n    // Setup analytics\n    Analytics.setSegmentNodeKey('vGu92cdmVaggGA26s3lBX6Y5fILm8SQ7');\n    Analytics.setVersionName(require('../package.json').version);\n    _registerLogs();\n\n    if (process.env.SERVER_URL) {\n      let serverUrl = process.env.SERVER_URL;\n      if (!serverUrl.startsWith('http')) {\n        serverUrl = `http://${serverUrl}`;\n      }\n      let parsedUrl = url.parse(serverUrl);\n      Config.api.host = parsedUrl.hostname;\n      Config.api.port = parsedUrl.port;\n    }\n\n    Config.developerTool = 'exp';\n\n    // Setup our commander instance\n    program.name = 'exp';\n    program\n      .version(require('../package.json').version)\n      .option('-o, --output [format]', 'Output format. pretty (default), raw');\n\n    // Load each module found in ./commands by 'registering' it with our commander instance\n    glob\n      .sync('commands/*.js', {\n        cwd: __dirname,\n      })\n      .forEach(file => {\n        const commandModule = require(`./${file}`);\n        if (typeof commandModule === 'function') {\n          commandModule(program);\n        } else if (typeof commandModule.default === 'function') {\n          commandModule.default(program);\n        } else {\n          log.error(`'${file}.js' is not a properly formatted command.`);\n        }\n      });\n\n    if (process.env.EXPO_DEBUG) {\n      glob\n        .sync('debug_commands/*.js', {\n          cwd: __dirname,\n        })\n        .forEach(file => {\n          require(`./${file}`)(program);\n        });\n    }\n\n    // Commander will now parse argv/argc\n    program.parse(process.argv);\n\n    // Display a message if the user does not input a valid command\n    let subCommand = process.argv[2];\n    if (subCommand) {\n      let commands = [];\n      program.commands.forEach(command => {\n        commands.push(command['_name']);\n        let alias = command['_alias'];\n        if (alias) {\n          commands.push(alias);\n        }\n      });\n      if (!_.includes(commands, subCommand)) {\n        console.log(\n          `\"${subCommand}\" is not an exp command. See \"exp --help\" for the full list of commands.`\n        );\n      }\n    } else {\n      program.help();\n    }\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n}\n\nasync function checkForUpdateAsync() {\n  let { state, current, latest } = await update.checkForExpUpdateAsync();\n  let message;\n  switch (state) {\n    case 'up-to-date':\n      break;\n\n    case 'out-of-date':\n      message = `There is a new version of exp available (${latest}).\nYou are currently using exp ${current}\nRun \\`npm install -g exp\\` to get the latest version`;\n      log.error(chalk.green(message));\n      break;\n\n    case 'ahead-of-published':\n      // if the user is ahead of npm, we're going to assume they know what they're doing\n      break;\n\n    default:\n      log.error('Confused about what version of exp you have?');\n  }\n}\n\nfunction _registerLogs() {\n  let stream = {\n    stream: {\n      write: chunk => {\n        if (chunk.code) {\n          switch (chunk.code) {\n            case NotificationCode.START_LOADING:\n              simpleSpinner.start();\n              return;\n            case NotificationCode.STOP_LOADING:\n              simpleSpinner.stop();\n              return;\n            case NotificationCode.DOWNLOAD_CLI_PROGRESS:\n              return;\n          }\n        }\n\n        if (chunk.level === bunyan.INFO) {\n          log(chunk.msg);\n        } else if (chunk.level === bunyan.WARN) {\n          log.warn(chunk.msg);\n        } else if (chunk.level >= bunyan.ERROR) {\n          log.error(chunk.msg);\n        }\n      },\n    },\n    type: 'raw',\n  };\n\n  Logger.notifications.addStream(stream);\n  Logger.global.addStream(stream);\n}\n\nasync function writePathAsync() {\n  let subCommand = process.argv[2];\n  if (subCommand === 'prepare-detached-build') {\n    // This is being run from Android Studio or Xcode. Don't want to write PATH in this case.\n    return;\n  }\n\n  await Binaries.writePathToUserSettingsAsync();\n}\n\n// This is the entry point of the CLI\nexport function run() {\n  (async function() {\n    await Promise.all([writePathAsync(), runAsync()]);\n  })().catch(e => {\n    console.error('Uncaught Error', e);\n    process.exit(1);\n  });\n}\n"],"sourceRoot":"/Users/brentvatne/universe/dev/exp/src"}