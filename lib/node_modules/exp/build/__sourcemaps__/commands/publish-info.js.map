{"version":3,"sources":["commands/publish-info.js"],"names":["HORIZ_CELL_WIDTH_SMALL","HORIZ_CELL_WIDTH_BIG","program","command","alias","description","option","parseInt","allowNonInteractive","asyncActionProjectDir","projectDir","options","count","isNaN","error","process","exit","formData","append","getSlugAsync","releaseChannel","platform","callMethodAsync","result","queryResult","length","sampleItem","generalTableString","printTableJson","fullName","channel","console","log","headers","push","colWidths","bigCells","forEach","has","header","tableString","printTableJsonArray","publishId","manifest","manifestTableString"],"mappings":"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","file":"../../commands/publish-info.js","sourcesContent":["/**\n * @flow\n */\n\nimport { Api, Project, FormData } from 'xdl';\nimport log from '../log';\nimport * as table from '../commands/utils/cli-table';\n\nconst HORIZ_CELL_WIDTH_SMALL = 15;\nconst HORIZ_CELL_WIDTH_BIG = 40;\n\nexport default (program: any) => {\n  program\n    .command('publish:history [project-dir]')\n    .alias('ph')\n    .description('View a log of your published releases.')\n    .option('-c, --release-channel <channel-name>', 'Filter by release channel')\n    .option(\n      '-count, --count <number-of-logs>',\n      'Number of logs to view, maximum 100, default 5.',\n      parseInt\n    )\n    .option('-p, --platform <ios|android>', 'Filter by platform, android or ios.')\n    .allowNonInteractive()\n    .asyncActionProjectDir(async (projectDir, options) => {\n      if (options.count && (isNaN(options.count) || options.count < 1 || options.count > 100)) {\n        log.error('-n must be a number between 1 and 100 inclusive');\n        process.exit(1);\n      }\n\n      let formData = new FormData();\n      formData.append('queryType', 'history');\n      formData.append('slug', await Project.getSlugAsync(projectDir, options));\n      if (options.releaseChannel) {\n        formData.append('releaseChannel', options.releaseChannel);\n      }\n      if (options.count) {\n        formData.append('count', options.count);\n      }\n      if (options.platform) {\n        formData.append('platform', options.platform);\n      }\n\n      let result = await Api.callMethodAsync('publishInfo', null, 'post', null, {\n        formData,\n      });\n\n      if (result.queryResult && result.queryResult.length > 0) {\n        // Print general publication info\n        let sampleItem = result.queryResult[0]; // get a sample item\n        let generalTableString = table.printTableJson(\n          {\n            fullName: sampleItem.fullName,\n            ...(sampleItem.channel ? { channel: sampleItem.channel } : null),\n          },\n          'General Info'\n        );\n        console.log(generalTableString);\n\n        // Print info specific to each publication\n        let headers = ['publicationId', 'appVersion', 'sdkVersion', 'publishedTime', 'platform'];\n        if (options.releaseChannel) {\n          headers.push('channelId');\n        }\n\n        // colWidths contains the cell size of each header\n        let colWidths = [];\n        let bigCells = new Set(['publicationId', 'channelId', 'publishedTime']);\n        headers.forEach(header => {\n          bigCells.has(header)\n            ? colWidths.push(HORIZ_CELL_WIDTH_BIG)\n            : colWidths.push(HORIZ_CELL_WIDTH_SMALL);\n        });\n        let tableString = table.printTableJsonArray(headers, result.queryResult, colWidths);\n        console.log(tableString);\n      } else {\n        log.error('No records found matching your query.');\n      }\n    });\n  program\n    .command('publish:details [project-dir]')\n    .alias('pd')\n    .description('View the details of a published release.')\n    .option('--publish-id <publish-id>', 'Publication id.')\n    .allowNonInteractive()\n    .asyncActionProjectDir(async (projectDir, options) => {\n      if (!options.publishId) {\n        log.error('publishId must be specified.');\n        process.exit(1);\n      }\n\n      let formData = new FormData();\n      formData.append('queryType', 'details');\n      formData.append('publishId', options.publishId);\n      formData.append('slug', await Project.getSlugAsync(projectDir, options));\n\n      let result = await Api.callMethodAsync('publishInfo', null, 'post', null, {\n        formData,\n      });\n\n      if (result.queryResult) {\n        let queryResult = result.queryResult;\n        let manifest = queryResult.manifest;\n        delete queryResult.manifest;\n\n        // Print general release info\n        let generalTableString = table.printTableJson(queryResult, 'Release Description');\n        console.log(generalTableString);\n\n        // Print manifest info\n        let manifestTableString = table.printTableJson(manifest, 'Manifest Details');\n        console.log(manifestTableString);\n      } else {\n        log.error('No records found matching your query.');\n      }\n    });\n};\n"],"sourceRoot":"/Users/brentvatne/universe/dev/exp/src"}