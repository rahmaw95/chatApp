{"version":3,"sources":["commands/init.js"],"names":["projectDir","options","templateType","questions","insertPath","dirname","name","basename","process","cwd","push","message","validate","input","test","length","projectType","versionsAsync","versions","templateIds","map","templatesv2","template","id","type","choices","prompt","answers","downloadAndExtractTemplate","action","validatedOptions","_retryObject","requestID","_currentRequestID","downloadTemplateApp","progressFunction","notifications","info","code","DOWNLOAD_CLI_PROGRESS","progress","_downloadIsSlowPrompt","_bar","tick","retryFunction","triggerRetryPrompt","templateDownload","extractTemplateApp","starterAppPath","root","exit","DOWNLOAD_IS_SLOW","val","answer","retry","clearXDLCacheAsync","total","complete","incomplete","program","command","alias","description","option","allowNonInteractive","asyncActionProjectDir"],"mappings":"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","file":"../../commands/init.js","sourcesContent":["import inquirer from 'inquirer';\nimport ProgressBar from 'progress';\nimport { Api, Exp, Logger, NotificationCode, MessageCode } from 'xdl';\n\nimport _ from 'lodash';\nimport log from '../log';\nimport CommandError from '../CommandError';\n\nimport path from 'path';\n\nlet _currentRequestID = 0;\nlet _downloadIsSlowPrompt = false;\nlet _retryObject = {};\nlet _bar = new ProgressBar('[:bar] :percent', {\n  total: 100,\n  complete: '=',\n  incomplete: ' ',\n});\n\nasync function action(projectDir, options) {\n  let templateType;\n  let questions = [];\n\n  let insertPath = path.dirname(projectDir);\n  let name = path.basename(projectDir);\n\n  // If the user does not supply a project name, exp prompts the user\n  if (projectDir === process.cwd()) {\n    questions.push({\n      name: 'name',\n      message: 'Choose a project name:',\n      validate(input) {\n        return /^[a-z0-9@.' '\\-\\_]*$/i.test(input) && input.length > 0;\n      },\n    });\n  }\n\n  if (options.projectType) {\n    templateType = options.projectType;\n  } else {\n    let versions = await Api.versionsAsync();\n    let templateIds = _.map(versions.templatesv2, template => template.id);\n\n    questions.push({\n      type: 'list',\n      name: 'type',\n      message: 'Choose a template type:',\n      choices: templateIds,\n    });\n  }\n\n  if (questions.length > 0) {\n    var answers = await inquirer.prompt(questions);\n    if (answers.name) {\n      // If the user supplies a project name, change the insertPath and name\n      insertPath = projectDir;\n      name = answers.name;\n    }\n    if (answers.type) {\n      templateType = answers.type;\n    }\n  }\n\n  if (!insertPath || !name) {\n    throw new CommandError('PATH_ERROR', `Couldn't determine path for new project.`);\n  }\n\n  // TODO(jim): We will need to update this method later to not force\n  // us to strip out the <name> from /path/to/<name> if we don't want\n  // to duplicate the folder at creation time. (example: test => test/test)\n  await downloadAndExtractTemplate(templateType, insertPath, {\n    name,\n  });\n}\n\nasync function downloadAndExtractTemplate(templateType, projectDir, validatedOptions) {\n  _retryObject = { templateType, projectDir, validatedOptions };\n  const requestID = _currentRequestID + 1;\n  _currentRequestID = requestID;\n\n  let templateDownload = await Exp.downloadTemplateApp(templateType, projectDir, {\n    ...validatedOptions,\n    progressFunction: progress => {\n      if (_currentRequestID === requestID) {\n        Logger.notifications.info({ code: NotificationCode.DOWNLOAD_CLI_PROGRESS }, progress + '%');\n        if (!_downloadIsSlowPrompt) {\n          _bar.tick();\n        }\n      }\n    },\n    retryFunction: () => {\n      triggerRetryPrompt();\n    },\n  });\n\n  // Since we cannot cancel the download request, we need a way to ignore all of the requests made except the last one when retrying.\n  if (_currentRequestID !== requestID) {\n    return;\n  }\n  let root = await Exp.extractTemplateApp(\n    templateDownload.starterAppPath,\n    templateDownload.name,\n    templateDownload.root\n  );\n  log(`Your project is ready at ${root}. Use \"exp start ${root}\" to get started.`);\n  process.exit();\n}\n\nasync function triggerRetryPrompt() {\n  _downloadIsSlowPrompt = true;\n  var answer = await inquirer({\n    type: 'input',\n    name: 'retry',\n    message: '\\n' + MessageCode.DOWNLOAD_IS_SLOW + '(y/n)',\n    validate(val) {\n      if (val !== 'y' && val !== 'n') {\n        return false;\n      }\n      return true;\n    },\n  });\n\n  if (answer.retry === 'n') {\n    _downloadIsSlowPrompt = false;\n  } else {\n    Exp.clearXDLCacheAsync();\n    _downloadIsSlowPrompt = false;\n    downloadAndExtractTemplate(\n      _retryObject.templateType,\n      _retryObject.projectDir,\n      _retryObject.validatedOptions\n    );\n  }\n}\n\nexport default program => {\n  program\n    .command('init [project-dir]')\n    .alias('i')\n    .description(\n      'Initializes a directory with an example project. Run it without any options and you will be prompted for the name and type.'\n    )\n    .option(\n      '-t, --projectType [type]',\n      'Specify what type of template to use. Run without this option to see all choices.'\n    )\n    .allowNonInteractive()\n    .asyncActionProjectDir(action, true /* skipProjectValidation */);\n};\n"],"sourceRoot":"/Users/brentvatne/universe/dev/exp/src"}