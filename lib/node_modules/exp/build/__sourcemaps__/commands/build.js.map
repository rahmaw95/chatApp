{"version":3,"sources":["commands/build.js"],"names":["program","command","alias","option","description","allowNonInteractive","asyncActionProjectDir","projectDir","options","channelRe","RegExp","test","releaseChannel","error","process","exit","type","undefined","localAuth","expertAuth","iosBuilder","androidBuilder","builder","checkStatus"],"mappings":";;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;kBAEe,UAACA,OAAD,EAAkB;AAC/BA,UACGC,OADH,CACW,yBADX,EAEGC,KAFH,CAES,IAFT,EAGGC,MAHH,CAGU,yBAHV,EAGqC,2BAHrC,EAIGA,MAJH,CAIU,mBAJV,EAI+B,qCAJ/B,EAIsE,wBAJtE,EAKGA,MALH,CAKU,kCALV,EAK8C,sCAL9C,EAKsF,SALtF,EAMGA,MANH,CAMU,kBANV,EAM8B,yBAN9B,EAOGA,MAPH,CAOU,eAPV,EAO2B,kEAP3B,EAQGC,WARH,CASI,kGATJ,EAWGC,mBAXH,GAYGC,qBAZH,CAYyB,UAACC,UAAD,EAAaC,OAAb,EAAyB;AAC9C,QAAIC,YAAY,IAAIC,MAAJ,CAAW,sBAAX,CAAhB;AACA,QAAI,CAACD,UAAUE,IAAV,CAAeH,QAAQI,cAAvB,CAAL,EAA6C;AAC3C,oCAAIC,KAAJ,CACE,mGADF;AAGAC,cAAQC,IAAR,CAAa,CAAb;AACD;AACD,QACEP,QAAQQ,IAAR,KAAiBC,SAAjB,IACAT,QAAQQ,IAAR,KAAiB,SADjB,IAEAR,QAAQQ,IAAR,KAAiB,WAHnB,EAIE;AACA,oCAAIH,KAAJ,CAAU,gDAAV;AACAC,cAAQC,IAAR,CAAa,CAAb;AACD;AACD,QAAIP,QAAQU,SAAR,IAAqBV,QAAQW,UAAjC,EAA6C;AAC3C,oCAAIN,KAAJ,CAAU,uDAAV;AACAC,cAAQC,IAAR,CAAa,CAAb;AACD;AACD,QAAMK,aAAa,gDAAeb,UAAf,EAA2BC,OAA3B,CAAnB;AACA,WAAOY,WAAWnB,OAAX,EAAP;AACD,GAlCH;;AAoCAD,UACGC,OADH,CACW,6BADX,EAEGC,KAFH,CAES,IAFT,EAGGC,MAHH,CAGU,yBAHV,EAGqC,2BAHrC,EAIGA,MAJH,CAIU,kCAJV,EAI8C,sCAJ9C,EAIsF,SAJtF,EAKGC,WALH,CAMI,oGANJ,EAQGC,mBARH,GASGC,qBATH,CASyB,UAACC,UAAD,EAAaC,OAAb,EAAyB;AAC9C,QAAIC,YAAY,IAAIC,MAAJ,CAAW,sBAAX,CAAhB;AACA,QAAI,CAACD,UAAUE,IAAV,CAAeH,QAAQI,cAAvB,CAAL,EAA6C;AAC3C,oCAAIC,KAAJ,CACE,mGADF;AAGAC,cAAQC,IAAR,CAAa,CAAb;AACD;AACD,QAAMM,iBAAiB,wDAAmBd,UAAnB,EAA+BC,OAA/B,CAAvB;AACA,WAAOa,eAAepB,OAAf,EAAP;AACD,GAnBH;;AAqBAD,UACGC,OADH,CACW,4BADX,EAEGC,KAFH,CAES,IAFT,EAGGE,WAHH,qFAIGC,mBAJH,GAKGC,qBALH;AAAA,8IAKyB,iBAAOC,UAAP,EAAmBC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfc,qBADe,GACL,kDAAgBf,UAAhB,EAA4BC,OAA5B,CADK;AAAA;AAAA;AAAA,qBAGNc,QAAQC,WAAR,CAAoB,KAApB,CAHM;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,oBAKf,kEALe;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALzB;;AAAA;AAAA;AAAA;AAAA;AAgBD,C","file":"../../commands/build.js","sourcesContent":["/**\n * @flow\n */\n\nimport BaseBuilder from './build/BaseBuilder';\nimport IOSBuilder from './build/IOSBuilder';\nimport AndroidBuilder from './build/AndroidBuilder';\nimport BuildError from './build/BuildError';\nimport log from '../log';\n\nexport default (program: any) => {\n  program\n    .command('build:ios [project-dir]')\n    .alias('bi')\n    .option('-c, --clear-credentials', 'Clear stored credentials.')\n    .option('-t --type <build>', 'Type of build: [archive|simulator].', /^(archive|simulator)$/i)\n    .option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default')\n    .option('-f, --local-auth', 'Turn on local auth flow')\n    .option('--expert-auth', \"Don't log in to Apple, provide all of the files needed to build.\")\n    .description(\n      'Build a standalone IPA for your project, signed and ready for submission to the Apple App Store.'\n    )\n    .allowNonInteractive()\n    .asyncActionProjectDir((projectDir, options) => {\n      let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n      if (!channelRe.test(options.releaseChannel)) {\n        log.error(\n          'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n        );\n        process.exit(1);\n      }\n      if (\n        options.type !== undefined &&\n        options.type !== 'archive' &&\n        options.type !== 'simulator'\n      ) {\n        log.error('Build type must be one of {archive, simulator}');\n        process.exit(1);\n      }\n      if (options.localAuth && options.expertAuth) {\n        log.error('Only one authentication mode can be selected at once.');\n        process.exit(1);\n      }\n      const iosBuilder = new IOSBuilder(projectDir, options);\n      return iosBuilder.command();\n    });\n\n  program\n    .command('build:android [project-dir]')\n    .alias('ba')\n    .option('-c, --clear-credentials', 'Clear stored credentials.')\n    .option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default')\n    .description(\n      'Build a standalone APK for your project, signed and ready for submission to the Google Play Store.'\n    )\n    .allowNonInteractive()\n    .asyncActionProjectDir((projectDir, options) => {\n      let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n      if (!channelRe.test(options.releaseChannel)) {\n        log.error(\n          'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n        );\n        process.exit(1);\n      }\n      const androidBuilder = new AndroidBuilder(projectDir, options);\n      return androidBuilder.command();\n    });\n\n  program\n    .command('build:status [project-dir]')\n    .alias('bs')\n    .description(`Gets the status of a current (or most recently finished) build for your project.`)\n    .allowNonInteractive()\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const builder = new BaseBuilder(projectDir, options);\n      try {\n        return await builder.checkStatus(false);\n      } catch (e) {\n        if (e instanceof BuildError) {\n          return;\n        }\n        throw e;\n      }\n    });\n};\n"],"sourceRoot":"/Users/brentvatne/universe/dev/exp/src"}