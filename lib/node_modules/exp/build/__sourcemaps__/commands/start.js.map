{"version":3,"sources":["commands/start.js"],"names":["projectDir","options","currentStatus","projectState","error","process","exit","warn","optsAsync","gray","root","resolve","startOpts","clear","reset","startAsync","getManifestUrlWithFallbackAsync","url","isUrlFallback","readConfigJsonAsync","exp","isDetached","newLine","printQRCode","underline","getRecipient","sendTo","recipient","sendUrlAsync","handleMobileOptsAsync","green","action","program","command","alias","description","option","urlOpts","allowNonInteractive","allowOffline","asyncActionProjectDir"],"mappings":";;;;;;;;;;;;;;;;;;;4IAcA,iBAAsBA,UAAtB,EAAkCC,OAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC6B,8BAAQC,aAAR,CAAsBF,UAAtB,CAD7B;;AAAA;AACQG,wBADR;;;AAGE,gBAAIA,iBAAiB,SAArB,EAAgC;AAC9B,4CAAIC,KAAJ,CAAU,qDAAV;AACAC,sBAAQC,IAAR,CAAa,CAAb;AACD,aAHD,MAGO,IAAIH,iBAAiB,KAArB,EAA4B;AACjC,4CAAII,IAAJ,CACE,0FADF;AAGD;;AAED,0DAAiBP,UAAjB;;AAZF;AAAA,mBAcQ,sCAAQQ,SAAR,CAAkBR,UAAlB,EAA8BC,OAA9B,CAdR;;AAAA;;AAgBE,+CAAI,kCAAMQ,IAAN,CAAW,kBAAX,EAA+BT,UAA/B,CAAJ;;AAEIU,gBAlBN,GAkBa,cAAKC,OAAL,CAAaX,UAAb,CAlBb;AAmBMY,qBAnBN,GAmBkB,EAnBlB;;AAoBE,gBAAIX,QAAQY,KAAZ,EAAmB;AACjBD,wBAAUE,KAAV,GAAkB,IAAlB;AACD;;AAtBH;AAAA,mBAwBQ,8BAAQC,UAAR,CAAmBL,IAAnB,EAAyBE,SAAzB,CAxBR;;AAAA;;AA0BE,+CAAI,gBAAJ;;AA1BF;AAAA,mBA4BqC,8BAAQI,+BAAR,CAAwChB,UAAxC,CA5BrC;;AAAA;AAAA;AA4BQiB,eA5BR,SA4BQA,GA5BR;AA4BaC,yBA5Bb,SA4BaA,aA5Bb;AAAA;AAAA,mBA8BsB,mCAAaC,mBAAb,CAAiCnB,UAAjC,CA9BtB;;AAAA;AAAA;AA8BQoB,eA9BR,SA8BQA,GA9BR;;;AAgCE,gBAAI,CAACA,IAAIC,UAAT,EAAqB;AACnB,iDAAI,4BAAJ;AACA,4CAAIC,OAAJ;AACA,oDAAQC,WAAR,CAAoBN,GAApB;AACD;;AAED,+CAAI,kBAAkB,kCAAMO,SAAN,CAAgBP,GAAhB,CAAtB;AACA,gBAAIC,aAAJ,EAAmB;AACjB,4CAAIX,IAAJ,CACE,kEACE,uDADF,GAEE,+CAHJ;AAKD;;AA7CH;AAAA,mBA+C0B,oCAAOkB,YAAP,CAAoBxB,QAAQyB,MAA5B,CA/C1B;;AAAA;AA+CQC,qBA/CR;;AAAA,iBAgDMA,SAhDN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiDU,oCAAOC,YAAP,CAAoBX,GAApB,EAAyBU,SAAzB,CAjDV;;AAAA;AAAA;AAAA,mBAoDQ,sCAAQE,qBAAR,CAA8B7B,UAA9B,EAA0CC,OAA1C,CApDR;;AAAA;;AAsDE,+CAAI,kCAAM6B,KAAN,CAAY,gEAAZ,CAAJ;;AAtDF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,M;;;;;;;AAVf;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AACA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;kBA2De,UAACC,OAAD,EAAkB;AAC/BA,UACGC,OADH,CACW,qBADX,EAEGC,KAFH,CAES,GAFT,EAGGC,WAHH,CAGe,0EAHf,EAIGC,MAJH,CAIU,sBAJV,EAIkC,oDAJlC,EAKGA,MALH,CAKU,aALV,EAKyB,uCALzB,EAMGC,OANH,GAOGC,mBAPH,GAQGC,YARH,GASGC,qBATH,CASyBT,MATzB,EASiC,IATjC;AAUD,C","file":"../../commands/start.js","sourcesContent":["/**\n * @flow\n */\n\nimport { ProjectUtils, Project } from 'xdl';\n\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport log from '../log';\nimport sendTo from '../sendTo';\nimport { installExitHooks } from '../exit';\nimport urlOpts from '../urlOpts';\n\nasync function action(projectDir, options) {\n  const projectState = await Project.currentStatus(projectDir);\n\n  if (projectState === 'running') {\n    log.error('exp is already running for this project. Exiting...');\n    process.exit(1);\n  } else if (projectState === 'ill') {\n    log.warn(\n      'exp may have exited improperly. Proceeding, but you should check for orphaned processes.'\n    );\n  }\n\n  installExitHooks(projectDir);\n\n  await urlOpts.optsAsync(projectDir, options);\n\n  log(chalk.gray('Using project at', projectDir));\n\n  let root = path.resolve(projectDir);\n  let startOpts = {};\n  if (options.clear) {\n    startOpts.reset = true;\n  }\n\n  await Project.startAsync(root, startOpts);\n\n  log('Expo is ready.');\n\n  let { url, isUrlFallback } = await Project.getManifestUrlWithFallbackAsync(projectDir);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n\n  if (!exp.isDetached) {\n    log('You can scan this QR code:');\n    log.newLine();\n    urlOpts.printQRCode(url);\n  }\n\n  log('Your URL is: ' + chalk.underline(url));\n  if (isUrlFallback) {\n    log.warn(\n      'Switched to a LAN URL because the tunnel appears to be down. ' +\n        'Only devices in the same network can access the app. ' +\n        'Restart with `exp start` to try reconnecting.'\n    );\n  }\n\n  const recipient = await sendTo.getRecipient(options.sendTo);\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  await urlOpts.handleMobileOptsAsync(projectDir, options);\n\n  log(chalk.green('Logs for your project will appear below. Press Ctrl+C to exit.'));\n}\n\nexport default (program: any) => {\n  program\n    .command('start [project-dir]')\n    .alias('r')\n    .description('Starts or restarts a local server for your app and gives you a URL to it')\n    .option('-s, --send-to [dest]', 'A phone number or e-mail address to send a link to')\n    .option('-c, --clear', 'Clear the React Native packager cache')\n    .urlOpts()\n    .allowNonInteractive()\n    .allowOffline()\n    .asyncActionProjectDir(action, true);\n};\n"],"sourceRoot":"/Users/brentvatne/universe/dev/exp/src"}