{"version":3,"sources":["commands/publish.js"],"names":["projectDir","options","channelRe","RegExp","releaseChannel","test","error","process","exit","currentStatus","status","startedOurOwn","startAsync","reset","clear","nonPersistent","quiet","getRecipient","sendTo","recipient","start","publishAsync","result","url","stop","underline","raw","sendUrlAsync","stopAsync","action","program","command","alias","description","option","allowNonInteractive","asyncActionProjectDir"],"mappings":";;;;;;;;;;;;;;;;;;;;4IAoBO,iBAAsBA,UAAtB;AAAA,QAA0CC,OAA1C,uEAA6D,EAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,qBADC,GACW,IAAIC,MAAJ,CAAW,sBAAX,CADX;;AAEL,gBAAIF,QAAQG,cAAR,IAA0B,CAACF,UAAUG,IAAV,CAAeJ,QAAQG,cAAvB,CAA/B,EAAuE;AACrE,4CAAIE,KAAJ,CACE,mGADF;AAGAC,sBAAQC,IAAR,CAAa,CAAb;AACD;AAPI;AAAA,mBAQgB,8BAAQC,aAAR,CAAsBT,UAAtB,CARhB;;AAAA;AAQCU,kBARD;AAUDC,yBAVC,GAUe,KAVf;;AAAA,kBAWDD,WAAW,SAXV;AAAA;AAAA;AAAA;;AAYH,+CAAI,mFAAJ;AACA,0DAAiBV,UAAjB;AAbG;AAAA,mBAcG,8BAAQY,UAAR,CACJZ,UADI,EAEJ,EAAEa,OAAOZ,QAAQa,KAAjB,EAAwBC,eAAe,IAAvC,EAFI,EAGJ,CAACd,QAAQe,KAHL,CAdH;;AAAA;AAmBHL,4BAAgB,IAAhB;;AAnBG;AAAA;AAAA,mBAsBiB,oCAAOM,YAAP,CAAoBhB,QAAQiB,MAA5B,CAtBjB;;AAAA;AAsBDC,qBAtBC;;AAuBL,+CAAI,eAAJ;;AAEA,gBAAIlB,QAAQe,KAAZ,EAAmB;AACjB,gEAAcI,KAAd;AACD;;AA3BI;AAAA,mBA6Bc,8BAAQC,YAAR,CAAqBrB,UAArB,EAAiC;AAClDI,8BAAgBH,QAAQG;AAD0B,aAAjC,CA7Bd;;AAAA;AA6BDkB,kBA7BC;AAiCDC,eAjCC,GAiCKD,OAAOC,GAjCZ;;AAmCL;AACA;AACA;;AACA,gBAAItB,QAAQG,cAAR,IAA0BH,QAAQG,cAAR,KAA2B,SAAzD,EAAoE;AAClEmB,oBAASA,GAAT,yBAAgCtB,QAAQG,cAAxC;AACD;;AAED,gBAAIH,QAAQe,KAAZ,EAAmB;AACjB,gEAAcQ,IAAd;AACD;;AAED,+CAAI,WAAJ;AACA,+CAAI,oBAAoB,kCAAMC,SAAN,CAAgBF,GAAhB,CAApB,GAA2C,IAA/C;AACA,0CAAIG,GAAJ,CAAQH,GAAR;;AAhDK,iBAkDDJ,SAlDC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAmDG,oCAAOQ,YAAP,CAAoBJ,GAApB,EAAyBJ,SAAzB,CAnDH;;AAAA;AAAA,iBAsDDR,aAtDC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAuDG,8BAAQiB,SAAR,CAAkB5B,UAAlB,CAvDH;;AAAA;AAAA,6CA0DEsB,MA1DF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeO,M;;;;;;;AAhBtB;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;kBAsEe,UAACC,OAAD,EAAkB;AAC/BA,UACGC,OADH,CACW,uBADX,EAEGC,KAFH,CAES,GAFT,EAGGC,WAHH,CAGe,oCAHf,EAIGC,MAJH,CAIU,aAJV,EAIyB,yDAJzB,EAKGA,MALH,CAKU,sBALV,EAKkC,oDALlC,EAMGA,MANH,CAMU,aANV,EAMyB,uCANzB,EAOGA,MAPH,CAQI,wCARJ,EASI,0DATJ,EAUI,SAVJ,EAYGC,mBAZH,GAaGC,qBAbH,CAayBP,MAbzB,EAaiC,IAbjC;AAcD,C","file":"../../commands/publish.js","sourcesContent":["/**\n * @flow\n */\n\nimport chalk from 'chalk';\nimport simpleSpinner from '@expo/simple-spinner';\n\nimport { Project } from 'xdl';\n\nimport log from '../log';\nimport sendTo from '../sendTo';\nimport { installExitHooks } from '../exit';\n\ntype Options = {\n  clear?: boolean,\n  sendTo?: string,\n  quiet?: boolean,\n  releaseChannel?: string,\n};\n\nexport async function action(projectDir: string, options: Options = {}) {\n  let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n  if (options.releaseChannel && !channelRe.test(options.releaseChannel)) {\n    log.error(\n      'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n    );\n    process.exit(1);\n  }\n  const status = await Project.currentStatus(projectDir);\n\n  let startedOurOwn = false;\n  if (status !== 'running') {\n    log('Unable to find an existing exp instance for this directory, starting a new one...');\n    installExitHooks(projectDir);\n    await Project.startAsync(\n      projectDir,\n      { reset: options.clear, nonPersistent: true },\n      !options.quiet\n    );\n    startedOurOwn = true;\n  }\n\n  let recipient = await sendTo.getRecipient(options.sendTo);\n  log('Publishing...');\n\n  if (options.quiet) {\n    simpleSpinner.start();\n  }\n\n  let result = await Project.publishAsync(projectDir, {\n    releaseChannel: options.releaseChannel,\n  });\n\n  let url = result.url;\n\n  // Append the query param for the release channel to the URL.\n  // When we integrate release channels into XDE, we can revisit this and\n  // perhaps push the logic for this into xdl\n  if (options.releaseChannel && options.releaseChannel !== 'default') {\n    url = `${url}?release-channel=${options.releaseChannel}`;\n  }\n\n  if (options.quiet) {\n    simpleSpinner.stop();\n  }\n\n  log('Published');\n  log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n  log.raw(url);\n\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  if (startedOurOwn) {\n    await Project.stopAsync(projectDir);\n  }\n\n  return result;\n}\n\nexport default (program: any) => {\n  program\n    .command('publish [project-dir]')\n    .alias('p')\n    .description('Publishes your project to exp.host')\n    .option('-q, --quiet', 'Suppress verbose output from the React Native packager.')\n    .option('-s, --send-to [dest]', 'A phone number or e-mail address to send a link to')\n    .option('-c, --clear', 'Clear the React Native packager cache')\n    .option(\n      '-c --release-channel <release channel>',\n      \"The release channel to publish to. Default is 'default'.\",\n      'default'\n    )\n    .allowNonInteractive()\n    .asyncActionProjectDir(action, true);\n};\n"],"sourceRoot":"/Users/brentvatne/universe/dev/exp/src"}