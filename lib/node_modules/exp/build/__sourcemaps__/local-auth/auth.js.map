{"version":3,"sources":["local-auth/auth.js"],"names":["creds","metadata","spawnAndCollectJSONOutputAsync","FASTLANE","validate_apple_credentials","appleId","password","getTeamsAttempt","result","reason","rawDump","Error","teams","length","console","log","teamId","forEach","team","i","prompt","type","name","message","validate","parseInt","val","answers","choice","validateCredentialsProduceTeamId","process","platform","fastlaneScratchPad","WSL_BASH","cleanUp","program","args","tmpDir","tmp","stdout","trim","cmd","windowsToWSLPath","ruby_dir","resolve","reject","jsonContent","opts","stdio","script","WSL_ONLY_PATH","join","child","spawn","e","on","d","toString","stderr","push","reply","Buffer","concat","JSON","parse","createAppOnPortal","ensureAppIdLocally","produceProvisionProfile","producePushCerts","produceCerts","require","appStoreAction","action","bundleIdentifier","experienceName","app_management","credentials","fetch_new_provisioning_profile","fetch_push_cert","fetch_cert","noSlashes","p","slice"],"mappings":"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","file":"../../local-auth/auth.js","sourcesContent":["import child_process from 'child_process';\nimport slash from 'slash';\nimport spawnAsync from '@expo/spawn-async';\nimport { basename } from 'path';\nimport inquirer from 'inquirer';\n\nimport log from '../log';\n\nconst FASTLANE =\n  process.platform === 'darwin'\n    ? require('@expo/traveling-fastlane-darwin')()\n    : require('@expo/traveling-fastlane-linux')();\n\nconst WSL_BASH = 'C:\\\\Windows\\\\system32\\\\bash.exe';\nconst WSL_ONLY_PATH = 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';\n\nfunction appStoreAction(creds, metadata, teamId, action) {\n  const args = [\n    action,\n    creds.appleId,\n    creds.password,\n    teamId,\n    metadata.bundleIdentifier,\n    metadata.experienceName,\n  ];\n  return spawnAndCollectJSONOutputAsync(FASTLANE.app_management, args);\n}\n\nexport function createAppOnPortal(creds, metadata, teamId) {\n  return appStoreAction(creds, metadata, teamId, 'create');\n}\n\nexport function ensureAppIdLocally(creds, metadata, teamId) {\n  return appStoreAction(creds, metadata, teamId, 'verify');\n}\n\nexport function produceProvisionProfile(credentials, { bundleIdentifier }, teamId) {\n  return spawnAndCollectJSONOutputAsync(FASTLANE.fetch_new_provisioning_profile, [\n    credentials.appleId,\n    credentials.password,\n    bundleIdentifier,\n    teamId,\n  ]);\n}\n\nexport function producePushCerts(credentials, { bundleIdentifier }, teamId) {\n  return spawnAndCollectJSONOutputAsync(FASTLANE.fetch_push_cert, [\n    credentials.appleId,\n    credentials.password,\n    bundleIdentifier,\n    teamId,\n  ]);\n}\n\nexport function produceCerts(credentials, teamId) {\n  return spawnAndCollectJSONOutputAsync(FASTLANE.fetch_cert, [\n    credentials.appleId,\n    credentials.password,\n    teamId,\n  ]);\n}\n\nexport async function validateCredentialsProduceTeamId(creds, metadata) {\n  const getTeamsAttempt = await spawnAndCollectJSONOutputAsync(\n    FASTLANE.validate_apple_credentials,\n    [creds.appleId, creds.password]\n  );\n  if (getTeamsAttempt.result === 'failure') {\n    const { reason, rawDump } = getTeamsAttempt;\n    throw new Error(`Reason:${reason}, raw:${JSON.stringify(rawDump)}`);\n  }\n  const { teams } = getTeamsAttempt;\n  if (teams.length === 0) {\n    throw new Error('You have no team ID associated with your apple account, cannot proceed');\n  }\n  log(`You have ${teams.length} teams`);\n  if (teams.length === 1) {\n    console.log(`Only 1 team associated with your account, using Team ID: ${teams[0].teamId}`);\n    return { teamId: teams[0].teamId };\n  } else {\n    teams.forEach((team, i) => {\n      console.log(`${i + 1}) ${team['teamId']} \"${team['name']}\" (${team['type']})`);\n    });\n    const answers = await inquirer.prompt({\n      type: 'input',\n      name: 'choice',\n      message: `Which Team ID to use?`,\n      validate: val => !Number.isNaN(parseInt(val, 10)),\n    });\n    return { teamId: teams[+answers.choice - 1].teamId };\n  }\n}\n\nconst windowsToWSLPath = p => {\n  const noSlashes = slash(p);\n  return noSlashes.slice(2, noSlashes.length);\n};\n\nlet fastlaneScratchPad = null;\n\nexport async function cleanUp() {\n  if (process.platform === 'win32' && fastlaneScratchPad !== null) {\n    await spawnAsync(WSL_BASH, ['-c', `rm -rf ${fastlaneScratchPad}`]);\n  }\n}\n\nasync function spawnAndCollectJSONOutputAsync(program, args) {\n  if (process.platform === 'win32' && fastlaneScratchPad === null) {\n    const tmpDir = await spawnAsync(WSL_BASH, ['-c', 'mktemp -d']);\n    const tmp = tmpDir.stdout.trim();\n    const cmd = `cp -R '/mnt/c${windowsToWSLPath(FASTLANE.ruby_dir)}' ${tmp}/fastlane`;\n    await spawnAsync(WSL_BASH, ['-c', cmd]);\n    fastlaneScratchPad = `${tmp}/fastlane`;\n  }\n\n  return new Promise((resolve, reject) => {\n    const jsonContent = [];\n    const opts = { stdio: ['inherit', 'pipe', 'pipe'] };\n    try {\n      if (process.platform === 'win32') {\n        const script = basename(program);\n        const cmd = ['-c', `${WSL_ONLY_PATH} ${fastlaneScratchPad}/${script} ${args.join(' ')}`];\n        var child = child_process.spawn(WSL_BASH, cmd, opts);\n      } else {\n        var child = child_process.spawn(program, args, opts);\n      }\n    } catch (e) {\n      return reject(e);\n    }\n    child.stdout.on('data', d => console.log(d.toString()));\n    // This is where we get our replies back from the ruby code\n    child.stderr.on('data', d => jsonContent.push(d));\n    child.stdout.on('end', () => {\n      const reply = Buffer.concat(jsonContent).toString();\n      try {\n        resolve(JSON.parse(reply));\n      } catch (e) {\n        reject({\n          result: 'failure',\n          reason: 'Could not understand JSON reply from Ruby local auth scripts',\n          rawDump: reply,\n        });\n      }\n    });\n  });\n}\n"],"sourceRoot":"/Users/brentvatne/universe/dev/exp/src"}